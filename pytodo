#!/usr/bin/env python3
import argparse

import sqlite3

import sys


def create_task():
    print("Create new task")

    new_note = input("Enter new note:")
    note_name = input("Choose title for this note:")

    con = sqlite3.connect("sqlite_new.db")

    cursor = con.cursor()

    cursor.execute("CREATE TABLE IF NOT EXISTS all_notes (name, note, current_id)")

    cursor.execute(
        "INSERT INTO all_notes (name, note, current_id) VALUES (?,?,?)",
        (note_name, new_note, cursor.lastrowid)
    )

    con.commit()
    cursor.close()
    con.close()

    print("You could watch your note by 'list'")


def delete_task():

    parser.add_argument('id')
    subparser = parser.add_subparsers()
    # args = parser.parse_args(sys.argv[2:])
    #
    # con = sqlite3.connect("sqlite_new.db")
    #
    # cursor = con.cursor()
    # #
    # cursor.execute("DELETE FROM all_notes WHERE current_id = '?'", (delete, id))

    con.commit()
    cursor.close()
    con.commit()

    print("Your updated journal is available by 'list'")


def list_tasks():
    print("All tasks")

    con = sqlite3.connect("sqlite_new.db")

    cursor = con.cursor()

    cursor.execute("SELECT * FROM all_notes WHERE type='table' ORDER BY name")
    available_table = (cursor.fetchall())

    print(available_table)


def undefined_command():
    print('Undefined command "{}". Use pytodo --help to learn about available commands'.format(command))


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument('command', help='Command to run. Available commands: new, list, delete')

    args = parser.parse_args()

    command = args.command

    commands = {
        'new': create_task,
        'delete': delete_task,
        'list': list_tasks
    }

    commands.get(command, undefined_command)()
