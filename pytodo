#!/usr/bin/env python3
import argparse
from _datetime import datetime, timedelta
import sqlite3


def create_task(args):
    print("Create new task:")

    new_note = input("Enter new note: ")
    note_name = input("Choose title for this note: ")

    end_time = datetime.strptime(input("Enter deadline date YY/MM/DD: "), '%Y/%m/%d')

    con = sqlite3.connect("sqlite_new.db")

    cursor = con.cursor()

    cursor.execute(
         "CREATE TABLE IF NOT EXISTS all_notes (id integer primary key autoincrement,name text, note text, started date, deadline date)"
    )

    cursor.execute(
        "INSERT INTO all_notes (name, note, started, deadline) VALUES (?,?,?,?)",
        (note_name, new_note, datetime.now(), end_time)
    )

    con.commit()
    cursor.close()
    con.close()

    print("You could watch your note by 'list'")


def delete_task(args):

    con = sqlite3.connect("sqlite_new.db")

    cursor = con.cursor()

    cursor.execute("DELETE FROM all_notes WHERE id = ?", (args.id, ))

    con.commit()
    cursor.close()
    con.close()
    print("Your updated journal is available by 'list'")


def list_tasks(args):
    print("All tasks")

    con = sqlite3.connect("sqlite_new.db")

    cursor = con.cursor()

    cursor.execute("SELECT * FROM all_notes")

    rows = cursor.fetchall()

    columns = [description[0] for description in cursor.description]

    cursor.close()
    con.close()

    print('\033[31m' + "| {:2} | {:16} | {:55} | {:30} | {:<30}".format(columns[0], columns[1], columns[2], columns[3],
                                                                       columns[4]).upper() + '\033[00m')

    for row in rows:
        print("| {:2} | {:<16} | {:<55} | {:30} | {:<30}".format(row[0], row[1], row[2], row[3], row[4]))


def undefined_command(args):
    print('Undefined command "{}". Use pytodo --help to learn about available commands'.format(command))


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    delete_parser = subparsers.add_parser('delete')
    list_parser = subparsers.add_parser('list')
    new_parser = subparsers.add_parser('new')

    delete_parser.add_argument('id', type=int)

    delete_parser.set_defaults(func=delete_task)
    list_parser.set_defaults(func=list_tasks)
    new_parser.set_defaults(func=create_task)

    parsed_args = parser.parse_args()
    parsed_args.func(parsed_args)
