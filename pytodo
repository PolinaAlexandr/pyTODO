#!/usr/bin/env python3
import argparse
from _datetime import datetime
import sqlite3
import os
from task import Task


CREATE_TABLE_QUERY = (
        'CREATE TABLE IF NOT EXISTS all_notes '
        '(id integer primary key autoincrement,name text, note text, started date, deadline date)'
)

DATABASE_NAME = "tasks.db"

DATABASE_PATH = os.path.join(
    os.path.expanduser('~'),
    '.pytodo',
    DATABASE_NAME
)


def check_db():
    if os.path.exists(DATABASE_PATH):
        print('\033[47m''\033[31m'"Tasks database already exists. Aborting initialization."'\033[00m''\033[00m')
        return

    print('\033[47m''\033[31m'"No tasks database found. Initializing new database at path {}.\033[00m''\033[00m'"
          .format(DATABASE_PATH))

    database_dir = os.path.dirname(DATABASE_PATH)

    if not os.path.exists(database_dir):
        os.makedirs(database_dir)

    with sqlite3.connect(DATABASE_PATH) as con, con.cursor() as cursor:
        cursor.execute(CREATE_TABLE_QUERY)


def user_input():
    new_note = input("Enter new note: ")
    note_name = input("Choose title for this note: ")
    end_time = datetime.strptime(input("Enter deadline date YY/MM/DD/H/M: "), '%Y/%m/%d/%H/%M')

    return Task(note_name, new_note, end_time)


def create_task(args):
    print("Here you could create some notes!")
    new_task = user_input()

    with sqlite3.connect(DATABASE_PATH) as con:
        cursor = con.cursor()
        cursor.execute(
            "INSERT INTO all_notes (name, note, started, deadline) VALUES (?,?,?,?)",
            (new_task.name, new_task.note, new_task.started, new_task.deadline))

    print("You could watch your note by 'list'")


def delete_task(args):
    with sqlite3.connect(DATABASE_PATH) as con:
        cursor = con.cursor()
        cursor.execute("DELETE FROM all_notes WHERE id = ?", (args.id, ))
        cursor.close()

        print("Your updated journal is available by 'list'")


def list_tasks(args):
    tasks = []
    with sqlite3.connect(DATABASE_PATH) as con:
        cursor = con.cursor()

        cursor.execute("SELECT id, name, note, started, deadline FROM all_notes")

        rows = cursor.fetchall()
        for row in rows:
            task = Task(row[1], row[2], row[4], row[0], row[3])

            tasks.append(task)

        columns = [description[0] for description in cursor.description]

        cursor.close()

    print('\033[47m''\033[31m'"All tasks"'\033[00m''\033[00m')

    print('\033[47m''\033[31m' + "| {:2} | {:16} | {:55} | {:30} | {:<30}".format(
        columns[0],
        columns[1],
        columns[2],
        columns[3],
                                                                            columns[4]).upper() + '\033[00m''\033[00m'
    )

    for task in tasks:
        task.print()


def edit_task(args):

    with sqlite3.connect(DATABASE_PATH) as con:
        cursor = con.cursor()

        cursor.execute("SELECT name, note, deadline FROM all_notes WHERE id = ?", (args.id, ))
        row = cursor.fetchone()
        old_task = Task(row[0], row[1], row[2])

        new_name = input("Your old task: {} . Enter new".format(row[0]))
        new_note = input("Your old note: {} . Enter new".format(row[1]))
        new_note_deadline = input("Your old deadline date: {} . Enter new".format(row[2]))
        if new_name:
            old_task.name = new_name
        if new_note:
            old_task.note = new_note
        if new_note_deadline:
            old_task.deadline = new_note_deadline

        print(old_task.name, old_task.note, old_task.deadline)

        cursor = con.cursor()
        cursor.execute("UPDATE all_notes SET name = ?, note = ?, started = ?, deadline = ?,  WHERE id = ?",
                       (old_task.name, old_task.note, old_task.started, old_task.deadline, args.id))
        cursor.close()

        print("Your updated journal is available by 'list'")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    delete_parser = subparsers.add_parser('delete')
    list_parser = subparsers.add_parser('list')
    new_parser = subparsers.add_parser('new')
    edit_parser = subparsers.add_parser('edit')

    delete_parser.add_argument('id', type=int)
    edit_parser.add_argument('id', type=int)

    delete_parser.set_defaults(func=delete_task)
    list_parser.set_defaults(func=list_tasks)
    new_parser.set_defaults(func=create_task)
    edit_parser.set_defaults(func=edit_task)

    parsed_args = parser.parse_args()

    try:
        check_db()
        parsed_args.func(parsed_args)

    except sqlite3.OperationalError:
        print("Connection Error")
    except IndexError:
        print("Tuple index out of range, check number of arguments")








